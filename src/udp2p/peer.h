#ifndef INCLUDE_UDP2P_PEER_H
#define INCLUDE_UDP2P_PEER_H

#include <cstdint>

#include <asio/awaitable.hpp>
#include <asio/io_context.hpp>

#include <spdlog/spdlog.h>

namespace mtrx {
namespace udp2p {

struct PeerInfo {
	uint64_t id; // peer id generated by server

	int localPort; // local port to send and to accept packets
};

class Peer {
  public:
	Peer(asio::io_context & ctx) : ctx_(ctx) {
		logger_ = spdlog::default_logger()->clone("peer");
	};

	~Peer(){};

	void run();
	void stop();

	uint64_t connectServer();
	void     disconnectServer();

	bool scanInfo();
	bool reportInfo();

	bool getPeerInfo();
	void connectPeer();
	void disconnectPeer();

	bool connectPeerByHP(); // hole punching, luky?
	bool connectPeerByLocalAddr();
	bool connectPeerByRelay();

  private:
	PeerInfo                        info;
	asio::io_context &              ctx_;
	std::shared_ptr<spdlog::logger> logger_;
};

}; // namespace udp2p
}; // namespace mtrx

#endif
